
stm32f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000814  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009d8  080009e0  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009d8  080009d8  000109e0  2**0
                  CONTENTS
  4 .ARM          00000000  080009d8  080009d8  000109e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d8  080009e0  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  080009e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080009e0  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009a9  00000000  00000000  00010a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ca  00000000  00000000  000113fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  000116c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000079  00000000  00000000  00011778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000177f  00000000  00000000  000117f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ebb  00000000  00000000  00012f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000055e1  00000000  00000000  00013e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001ec  00000000  00000000  0001940c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000195f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009c0 	.word	0x080009c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080009c0 	.word	0x080009c0

08000204 <main>:
}
GPIO_Handle_t GPIOButton;
GPIO_Handle_t GPIOLed;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	//GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOA;
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <main+0x68>)
 800020a:	4a19      	ldr	r2, [pc, #100]	; (8000270 <main+0x6c>)
 800020c:	601a      	str	r2, [r3, #0]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_5;
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <main+0x68>)
 8000210:	2205      	movs	r2, #5
 8000212:	711a      	strb	r2, [r3, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <main+0x68>)
 8000216:	2201      	movs	r2, #1
 8000218:	715a      	strb	r2, [r3, #5]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <main+0x68>)
 800021c:	2200      	movs	r2, #0
 800021e:	721a      	strb	r2, [r3, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_MEDIUM;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <main+0x68>)
 8000222:	2201      	movs	r2, #1
 8000224:	719a      	strb	r2, [r3, #6]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x68>)
 8000228:	2200      	movs	r2, #0
 800022a:	71da      	strb	r2, [r3, #7]

	//GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOC;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <main+0x70>)
 800022e:	4a12      	ldr	r2, [pc, #72]	; (8000278 <main+0x74>)
 8000230:	601a      	str	r2, [r3, #0]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <main+0x70>)
 8000234:	220d      	movs	r2, #13
 8000236:	711a      	strb	r2, [r3, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IT_FT;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <main+0x70>)
 800023a:	2204      	movs	r2, #4
 800023c:	715a      	strb	r2, [r3, #5]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_MEDIUM;
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <main+0x70>)
 8000240:	2201      	movs	r2, #1
 8000242:	719a      	strb	r2, [r3, #6]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <main+0x70>)
 8000246:	2200      	movs	r2, #0
 8000248:	71da      	strb	r2, [r3, #7]

	GPIO_Init(&GPIOLed);
 800024a:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x68>)
 800024c:	f000 f8ec 	bl	8000428 <GPIO_Init>
	GPIO_Init(&GPIOButton);
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <main+0x70>)
 8000252:	f000 f8e9 	bl	8000428 <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000256:	2101      	movs	r1, #1
 8000258:	2028      	movs	r0, #40	; 0x28
 800025a:	f000 fabd 	bl	80007d8 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10,NVIC_IRQ_PRI0);
 800025e:	2100      	movs	r1, #0
 8000260:	2028      	movs	r0, #40	; 0x28
 8000262:	f000 fb3f 	bl	80008e4 <GPIO_IRQPriorityConfig>
 8000266:	2300      	movs	r3, #0
    	}
    	else{
    	GPIO_WriteToOutputPin(GPIOLed.pGPIOx,GPIOLed.GPIO_PinConfig.GPIO_PinNumber,RESET);
    	}
    }*/
}
 8000268:	4618      	mov	r0, r3
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000028 	.word	0x20000028
 8000270:	40020000 	.word	0x40020000
 8000274:	2000001c 	.word	0x2000001c
 8000278:	40020800 	.word	0x40020800

0800027c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0

	GPIO_IRQHandling(GPIO_PIN_NO_13);
 8000280:	200d      	movs	r0, #13
 8000282:	f000 fb59 	bl	8000938 <GPIO_IRQHandling>
	if(GPIO_ReadFromInputPin(GPIOLed.pGPIOx,GPIOLed.GPIO_PinConfig.GPIO_PinNumber)==1){
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <EXTI15_10_IRQHandler+0x48>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <EXTI15_10_IRQHandler+0x48>)
 800028c:	7912      	ldrb	r2, [r2, #4]
 800028e:	4611      	mov	r1, r2
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fa65 	bl	8000760 <GPIO_ReadFromInputPin>
 8000296:	4603      	mov	r3, r0
 8000298:	2b01      	cmp	r3, #1
 800029a:	d108      	bne.n	80002ae <EXTI15_10_IRQHandler+0x32>
	GPIO_WriteToOutputPin(GPIOLed.pGPIOx,GPIOLed.GPIO_PinConfig.GPIO_PinNumber,RESET);
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <EXTI15_10_IRQHandler+0x48>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <EXTI15_10_IRQHandler+0x48>)
 80002a2:	7911      	ldrb	r1, [r2, #4]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fa70 	bl	800078c <GPIO_WriteToOutputPin>
	}
	else{
		GPIO_WriteToOutputPin(GPIOLed.pGPIOx,GPIOLed.GPIO_PinConfig.GPIO_PinNumber,SET);
	}

}
 80002ac:	e007      	b.n	80002be <EXTI15_10_IRQHandler+0x42>
		GPIO_WriteToOutputPin(GPIOLed.pGPIOx,GPIOLed.GPIO_PinConfig.GPIO_PinNumber,SET);
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI15_10_IRQHandler+0x48>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI15_10_IRQHandler+0x48>)
 80002b4:	7911      	ldrb	r1, [r2, #4]
 80002b6:	2201      	movs	r2, #1
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fa67 	bl	800078c <GPIO_WriteToOutputPin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000028 	.word	0x20000028

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 fb3f 	bl	8000978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff83 	bl	8000204 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	080009e0 	.word	0x080009e0
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	20000034 	.word	0x20000034

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d161      	bne.n	80003f2 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a33      	ldr	r2, [pc, #204]	; (8000400 <GPIO_PeriClockControl+0xe4>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000336:	4b33      	ldr	r3, [pc, #204]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a32      	ldr	r2, [pc, #200]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{
		//TODO
	}
}
 8000342:	e056      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a30      	ldr	r2, [pc, #192]	; (8000408 <GPIO_PeriClockControl+0xec>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800034c:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a2c      	ldr	r2, [pc, #176]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e04b      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a2b      	ldr	r2, [pc, #172]	; (800040c <GPIO_PeriClockControl+0xf0>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a27      	ldr	r2, [pc, #156]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e040      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a27      	ldr	r2, [pc, #156]	; (8000410 <GPIO_PeriClockControl+0xf4>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e035      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a22      	ldr	r2, [pc, #136]	; (8000414 <GPIO_PeriClockControl+0xf8>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e02a      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <GPIO_PeriClockControl+0xfc>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a4:	4b17      	ldr	r3, [pc, #92]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a16      	ldr	r2, [pc, #88]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e01f      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a19      	ldr	r2, [pc, #100]	; (800041c <GPIO_PeriClockControl+0x100>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a11      	ldr	r2, [pc, #68]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e014      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <GPIO_PeriClockControl+0x104>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e009      	b.n	80003f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a10      	ldr	r2, [pc, #64]	; (8000424 <GPIO_PeriClockControl+0x108>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d105      	bne.n	80003f2 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a06      	ldr	r2, [pc, #24]	; (8000404 <GPIO_PeriClockControl+0xe8>)
 80003ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40020000 	.word	0x40020000
 8000404:	40023800 	.word	0x40023800
 8000408:	40020400 	.word	0x40020400
 800040c:	40020800 	.word	0x40020800
 8000410:	40020c00 	.word	0x40020c00
 8000414:	40021000 	.word	0x40021000
 8000418:	40021400 	.word	0x40021400
 800041c:	40021800 	.word	0x40021800
 8000420:	40021c00 	.word	0x40021c00
 8000424:	40022000 	.word	0x40022000

08000428 <GPIO_Init>:
	 *
	 * @Note              -

	 */
	void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
	{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
		 uint32_t temp=0; //temp. register
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]

		 //enable the peripheral clock

		 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2101      	movs	r1, #1
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff6e 	bl	800031c <GPIO_PeriClockControl>

		//1 . configure the mode of gpio pin

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	2b03      	cmp	r3, #3
 8000446:	d820      	bhi.n	800048a <GPIO_Init+0x62>
		{
			//the non interrupt mode
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	795b      	ldrb	r3, [r3, #5]
 800044c:	461a      	mov	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	4619      	mov	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	400a      	ands	r2, r1
 8000476:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	6819      	ldr	r1, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	430a      	orrs	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	e0cb      	b.n	8000622 <GPIO_Init+0x1fa>

		}else
		{
			//this part will code later . ( interrupt mode)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	2b04      	cmp	r3, #4
 8000490:	d117      	bne.n	80004c2 <GPIO_Init+0x9a>
			{
				//1. configure the FTSR
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000492:	4b4b      	ldr	r3, [pc, #300]	; (80005c0 <GPIO_Init+0x198>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7912      	ldrb	r2, [r2, #4]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a47      	ldr	r2, [pc, #284]	; (80005c0 <GPIO_Init+0x198>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	60d3      	str	r3, [r2, #12]
				//Clear the corresponding RTSR bit
				EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b45      	ldr	r3, [pc, #276]	; (80005c0 <GPIO_Init+0x198>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a41      	ldr	r2, [pc, #260]	; (80005c0 <GPIO_Init+0x198>)
 80004bc:	400b      	ands	r3, r1
 80004be:	6093      	str	r3, [r2, #8]
 80004c0:	e035      	b.n	800052e <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	795b      	ldrb	r3, [r3, #5]
 80004c6:	2b05      	cmp	r3, #5
 80004c8:	d117      	bne.n	80004fa <GPIO_Init+0xd2>
			{
				//1 . configure the RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ca:	4b3d      	ldr	r3, [pc, #244]	; (80005c0 <GPIO_Init+0x198>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	7912      	ldrb	r2, [r2, #4]
 80004d2:	4611      	mov	r1, r2
 80004d4:	2201      	movs	r2, #1
 80004d6:	408a      	lsls	r2, r1
 80004d8:	4611      	mov	r1, r2
 80004da:	4a39      	ldr	r2, [pc, #228]	; (80005c0 <GPIO_Init+0x198>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6093      	str	r3, [r2, #8]
				//Clear the corresponding RTSR bit
				EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b37      	ldr	r3, [pc, #220]	; (80005c0 <GPIO_Init+0x198>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	43d2      	mvns	r2, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a33      	ldr	r2, [pc, #204]	; (80005c0 <GPIO_Init+0x198>)
 80004f4:	400b      	ands	r3, r1
 80004f6:	60d3      	str	r3, [r2, #12]
 80004f8:	e019      	b.n	800052e <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	795b      	ldrb	r3, [r3, #5]
 80004fe:	2b06      	cmp	r3, #6
 8000500:	d115      	bne.n	800052e <GPIO_Init+0x106>
			{
				//1. configure both FTSR and RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000502:	4b2f      	ldr	r3, [pc, #188]	; (80005c0 <GPIO_Init+0x198>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	7912      	ldrb	r2, [r2, #4]
 800050a:	4611      	mov	r1, r2
 800050c:	2201      	movs	r2, #1
 800050e:	408a      	lsls	r2, r1
 8000510:	4611      	mov	r1, r2
 8000512:	4a2b      	ldr	r2, [pc, #172]	; (80005c0 <GPIO_Init+0x198>)
 8000514:	430b      	orrs	r3, r1
 8000516:	6093      	str	r3, [r2, #8]
				//Clear the corresponding RTSR bit
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000518:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <GPIO_Init+0x198>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a25      	ldr	r2, [pc, #148]	; (80005c0 <GPIO_Init+0x198>)
 800052a:	430b      	orrs	r3, r1
 800052c:	60d3      	str	r3, [r2, #12]
			}

			//2. configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	f003 0303 	and.w	r3, r3, #3
 800053e:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <GPIO_Init+0x19c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d04e      	beq.n	80005e8 <GPIO_Init+0x1c0>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <GPIO_Init+0x1a0>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d032      	beq.n	80005ba <GPIO_Init+0x192>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <GPIO_Init+0x1a4>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d02b      	beq.n	80005b6 <GPIO_Init+0x18e>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <GPIO_Init+0x1a8>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d024      	beq.n	80005b2 <GPIO_Init+0x18a>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <GPIO_Init+0x1ac>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d01d      	beq.n	80005ae <GPIO_Init+0x186>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <GPIO_Init+0x1b0>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d016      	beq.n	80005aa <GPIO_Init+0x182>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a16      	ldr	r2, [pc, #88]	; (80005dc <GPIO_Init+0x1b4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d00f      	beq.n	80005a6 <GPIO_Init+0x17e>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <GPIO_Init+0x1b8>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d008      	beq.n	80005a2 <GPIO_Init+0x17a>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <GPIO_Init+0x1bc>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d101      	bne.n	800059e <GPIO_Init+0x176>
 800059a:	2308      	movs	r3, #8
 800059c:	e025      	b.n	80005ea <GPIO_Init+0x1c2>
 800059e:	2300      	movs	r3, #0
 80005a0:	e023      	b.n	80005ea <GPIO_Init+0x1c2>
 80005a2:	2307      	movs	r3, #7
 80005a4:	e021      	b.n	80005ea <GPIO_Init+0x1c2>
 80005a6:	2306      	movs	r3, #6
 80005a8:	e01f      	b.n	80005ea <GPIO_Init+0x1c2>
 80005aa:	2305      	movs	r3, #5
 80005ac:	e01d      	b.n	80005ea <GPIO_Init+0x1c2>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e01b      	b.n	80005ea <GPIO_Init+0x1c2>
 80005b2:	2303      	movs	r3, #3
 80005b4:	e019      	b.n	80005ea <GPIO_Init+0x1c2>
 80005b6:	2302      	movs	r3, #2
 80005b8:	e017      	b.n	80005ea <GPIO_Init+0x1c2>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e015      	b.n	80005ea <GPIO_Init+0x1c2>
 80005be:	bf00      	nop
 80005c0:	40013c00 	.word	0x40013c00
 80005c4:	40020000 	.word	0x40020000
 80005c8:	40020400 	.word	0x40020400
 80005cc:	40020800 	.word	0x40020800
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40021400 	.word	0x40021400
 80005dc:	40021800 	.word	0x40021800
 80005e0:	40021c00 	.word	0x40021c00
 80005e4:	40022000 	.word	0x40022000
 80005e8:	2300      	movs	r3, #0
 80005ea:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 80005ec:	4b59      	ldr	r3, [pc, #356]	; (8000754 <GPIO_Init+0x32c>)
 80005ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f0:	4a58      	ldr	r2, [pc, #352]	; (8000754 <GPIO_Init+0x32c>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80005f8:	7c7a      	ldrb	r2, [r7, #17]
 80005fa:	7cbb      	ldrb	r3, [r7, #18]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	fa02 f103 	lsl.w	r1, r2, r3
 8000602:	4a55      	ldr	r2, [pc, #340]	; (8000758 <GPIO_Init+0x330>)
 8000604:	7cfb      	ldrb	r3, [r7, #19]
 8000606:	3302      	adds	r3, #2
 8000608:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			//3 . enable the exti interrupt delivery using IMR
			EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800060c:	4b53      	ldr	r3, [pc, #332]	; (800075c <GPIO_Init+0x334>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a4f      	ldr	r2, [pc, #316]	; (800075c <GPIO_Init+0x334>)
 800061e:	430b      	orrs	r3, r1
 8000620:	6013      	str	r3, [r2, #0]

		}

		//2. configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );//its multiplied by 2 because this reg has two bits for each pin speed
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	2103      	movs	r1, #3
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	400a      	ands	r2, r1
 8000650:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6899      	ldr	r1, [r3, #8]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	430a      	orrs	r2, r1
 8000660:	609a      	str	r2, [r3, #8]

		//3. configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	79db      	ldrb	r3, [r3, #7]
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	2103      	movs	r1, #3
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	4619      	mov	r1, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	400a      	ands	r2, r1
 8000690:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68d9      	ldr	r1, [r3, #12]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	430a      	orrs	r2, r1
 80006a0:	60da      	str	r2, [r3, #12]


		//4. configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	2301      	movs	r3, #1
 80006c0:	408b      	lsls	r3, r1
 80006c2:	43db      	mvns	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	400a      	ands	r2, r1
 80006cc:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6859      	ldr	r1, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	430a      	orrs	r2, r1
 80006dc:	605a      	str	r2, [r3, #4]

		//5. configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	795b      	ldrb	r3, [r3, #5]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d131      	bne.n	800074a <GPIO_Init+0x322>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	08db      	lsrs	r3, r3, #3
 80006ec:	743b      	strb	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	7c3a      	ldrb	r2, [r7, #16]
 80006fe:	3208      	adds	r2, #8
 8000700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	220f      	movs	r2, #15
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	4618      	mov	r0, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	7c3a      	ldrb	r2, [r7, #16]
 8000718:	4001      	ands	r1, r0
 800071a:	3208      	adds	r2, #8
 800071c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	7c3a      	ldrb	r2, [r7, #16]
 8000726:	3208      	adds	r2, #8
 8000728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7a5b      	ldrb	r3, [r3, #9]
 8000730:	461a      	mov	r2, r3
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	7c3a      	ldrb	r2, [r7, #16]
 8000742:	4301      	orrs	r1, r0
 8000744:	3208      	adds	r2, #8
 8000746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

	}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40013800 	.word	0x40013800
 800075c:	40013c00 	.word	0x40013c00

08000760 <GPIO_ReadFromInputPin>:
	 *
	 * @Note              -

	 */
	uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
	{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	   uint8_t value;

	   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	691a      	ldr	r2, [r3, #16]
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	fa22 f303 	lsr.w	r3, r2, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]

	   return value;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000780:	4618      	mov	r0, r3
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <GPIO_WriteToOutputPin>:
	 *
	 * @Note              -

	 */
	void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
	{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
 8000798:	4613      	mov	r3, r2
 800079a:	70bb      	strb	r3, [r7, #2]

		if(Value == SET)
 800079c:	78bb      	ldrb	r3, [r7, #2]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d109      	bne.n	80007b6 <GPIO_WriteToOutputPin+0x2a>
		{
			//write 1 to the output data register at the bit field corresponding to the pin number
			pGPIOx->ODR |= ( 1 << PinNumber);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	78fa      	ldrb	r2, [r7, #3]
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	615a      	str	r2, [r3, #20]
		}else
		{
			//write 0
			pGPIOx->ODR &= ~( 1 << PinNumber);
		}
	}
 80007b4:	e009      	b.n	80007ca <GPIO_WriteToOutputPin+0x3e>
			pGPIOx->ODR &= ~( 1 << PinNumber);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	78fa      	ldrb	r2, [r7, #3]
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	43d2      	mvns	r2, r2
 80007c4:	401a      	ands	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	615a      	str	r2, [r3, #20]
	}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <GPIO_IRQInterruptConfig>:
	 *
	 * @Note              -

	 */
	void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
	{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]

		if(EnorDi == ENABLE)
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d133      	bne.n	8000856 <GPIO_IRQInterruptConfig+0x7e>
		{
			if(IRQNumber <= 31)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	d80a      	bhi.n	800080a <GPIO_IRQInterruptConfig+0x32>
			{
				//program ISER0 register
				*NVIC_ISER0 |= ( 1 << IRQNumber );//ISER interrupt set enable
 80007f4:	4b35      	ldr	r3, [pc, #212]	; (80008cc <GPIO_IRQInterruptConfig+0xf4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a32      	ldr	r2, [pc, #200]	; (80008cc <GPIO_IRQInterruptConfig+0xf4>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6013      	str	r3, [r2, #0]
				//program ICER2 register
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
			}
		}

	}
 8000808:	e059      	b.n	80008be <GPIO_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b1f      	cmp	r3, #31
 800080e:	d90f      	bls.n	8000830 <GPIO_IRQInterruptConfig+0x58>
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b3f      	cmp	r3, #63	; 0x3f
 8000814:	d80c      	bhi.n	8000830 <GPIO_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <GPIO_IRQInterruptConfig+0xf8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	79fa      	ldrb	r2, [r7, #7]
 800081c:	f002 021f 	and.w	r2, r2, #31
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <GPIO_IRQInterruptConfig+0xf8>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e046      	b.n	80008be <GPIO_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b3f      	cmp	r3, #63	; 0x3f
 8000834:	d943      	bls.n	80008be <GPIO_IRQInterruptConfig+0xe6>
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b5f      	cmp	r3, #95	; 0x5f
 800083a:	d840      	bhi.n	80008be <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <GPIO_IRQInterruptConfig+0xfc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	4611      	mov	r1, r2
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <GPIO_IRQInterruptConfig+0xfc>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6013      	str	r3, [r2, #0]
	}
 8000854:	e033      	b.n	80008be <GPIO_IRQInterruptConfig+0xe6>
			if(IRQNumber <= 31)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b1f      	cmp	r3, #31
 800085a:	d80a      	bhi.n	8000872 <GPIO_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= ( 1 << IRQNumber );//ICER interrupt clear enable
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <GPIO_IRQInterruptConfig+0x100>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	2101      	movs	r1, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <GPIO_IRQInterruptConfig+0x100>)
 800086c:	430b      	orrs	r3, r1
 800086e:	6013      	str	r3, [r2, #0]
	}
 8000870:	e025      	b.n	80008be <GPIO_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b1f      	cmp	r3, #31
 8000876:	d90f      	bls.n	8000898 <GPIO_IRQInterruptConfig+0xc0>
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b3f      	cmp	r3, #63	; 0x3f
 800087c:	d80c      	bhi.n	8000898 <GPIO_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <GPIO_IRQInterruptConfig+0x104>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	f002 021f 	and.w	r2, r2, #31
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <GPIO_IRQInterruptConfig+0x104>)
 8000892:	430b      	orrs	r3, r1
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e012      	b.n	80008be <GPIO_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b3f      	cmp	r3, #63	; 0x3f
 800089c:	d90f      	bls.n	80008be <GPIO_IRQInterruptConfig+0xe6>
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b5f      	cmp	r3, #95	; 0x5f
 80008a2:	d80c      	bhi.n	80008be <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <GPIO_IRQInterruptConfig+0x108>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	4611      	mov	r1, r2
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <GPIO_IRQInterruptConfig+0x108>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	6013      	str	r3, [r2, #0]
	}
 80008bc:	e7ff      	b.n	80008be <GPIO_IRQInterruptConfig+0xe6>
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000e104 	.word	0xe000e104
 80008d4:	e000e108 	.word	0xe000e108
 80008d8:	e000e180 	.word	0xe000e180
 80008dc:	e000e184 	.word	0xe000e184
 80008e0:	e000e188 	.word	0xe000e188

080008e4 <GPIO_IRQPriorityConfig>:
	 *
	 * @Note              -

	 */
	void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
	{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
		//1. first lets find out the ipr register
		uint8_t iprx = IRQNumber / 4;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	73fb      	strb	r3, [r7, #15]
		uint8_t iprx_section  = IRQNumber %4 ;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	73bb      	strb	r3, [r7, #14]

		uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	3304      	adds	r3, #4
 8000906:	737b      	strb	r3, [r7, #13]

		*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000910:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000914:	6819      	ldr	r1, [r3, #0]
 8000916:	7b7b      	ldrb	r3, [r7, #13]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	409a      	lsls	r2, r3
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000924:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]

	}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <GPIO_IRQHandling>:
	 *
	 * @Note              -

	 */
	void GPIO_IRQHandling(uint8_t PinNumber)
	{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
		//there are two pending registers EXTI AND NVIC
		//clear the exti pr register corresponding to the pin number
		if(EXTI->PR & ( 1 << PinNumber))//PR Pending register
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <GPIO_IRQHandling+0x3c>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	4013      	ands	r3, r2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d009      	beq.n	8000968 <GPIO_IRQHandling+0x30>
		{
			//clear
			EXTI->PR |= ( 1 << PinNumber);
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <GPIO_IRQHandling+0x3c>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	2101      	movs	r1, #1
 800095c:	fa01 f202 	lsl.w	r2, r1, r2
 8000960:	4611      	mov	r1, r2
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <GPIO_IRQHandling+0x3c>)
 8000964:	430b      	orrs	r3, r1
 8000966:	6153      	str	r3, [r2, #20]
		}

	}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40013c00 	.word	0x40013c00

08000978 <__libc_init_array>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4d0d      	ldr	r5, [pc, #52]	; (80009b0 <__libc_init_array+0x38>)
 800097c:	4c0d      	ldr	r4, [pc, #52]	; (80009b4 <__libc_init_array+0x3c>)
 800097e:	1b64      	subs	r4, r4, r5
 8000980:	10a4      	asrs	r4, r4, #2
 8000982:	2600      	movs	r6, #0
 8000984:	42a6      	cmp	r6, r4
 8000986:	d109      	bne.n	800099c <__libc_init_array+0x24>
 8000988:	4d0b      	ldr	r5, [pc, #44]	; (80009b8 <__libc_init_array+0x40>)
 800098a:	4c0c      	ldr	r4, [pc, #48]	; (80009bc <__libc_init_array+0x44>)
 800098c:	f000 f818 	bl	80009c0 <_init>
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	10a4      	asrs	r4, r4, #2
 8000994:	2600      	movs	r6, #0
 8000996:	42a6      	cmp	r6, r4
 8000998:	d105      	bne.n	80009a6 <__libc_init_array+0x2e>
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a0:	4798      	blx	r3
 80009a2:	3601      	adds	r6, #1
 80009a4:	e7ee      	b.n	8000984 <__libc_init_array+0xc>
 80009a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009aa:	4798      	blx	r3
 80009ac:	3601      	adds	r6, #1
 80009ae:	e7f2      	b.n	8000996 <__libc_init_array+0x1e>
 80009b0:	080009d8 	.word	0x080009d8
 80009b4:	080009d8 	.word	0x080009d8
 80009b8:	080009d8 	.word	0x080009d8
 80009bc:	080009dc 	.word	0x080009dc

080009c0 <_init>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr

080009cc <_fini>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	bf00      	nop
 80009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d2:	bc08      	pop	{r3}
 80009d4:	469e      	mov	lr, r3
 80009d6:	4770      	bx	lr
